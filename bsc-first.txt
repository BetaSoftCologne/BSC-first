BALLS=16
DIM CODE    8000
DIM DUMMY   200
DIM WSIN    255*4
DIM WSIN1   255*4
DIM WSIN2   255*4
DIM TCOS    255*4
DIM TSIN    255*4
DIM ADRTAB  150*4
DIM SPDTAB  150
DIM FONT    15200
DIM SCRBUFF (384+16)*16

FOR I=0 TO 255:!(WSIN+I*4)=384*INT(144+40*COSRAD(I*1.40785)):NEXT
FOR I=0 TO 255:!(WSIN1+I*4)=96+95*SINRAD(I*1.40785):NEXT
FOR I=0 TO 255:!(WSIN2+I*4)=48+47*COSRAD(I*1.40785):NEXT
FOR I=0 TO 255:!(TCOS+I*4)=&FFF*COSRAD(I*1.40785):NEXT
FOR I=0 TO 255:!(TSIN+I*4)=&FFF*SINRAD(I*1.40785):NEXT
FOR I=0 TO 149:!(ADRTAB+I*4)=RND(384*288):NEXT
FOR I=0 TO 149:SPDTAB?I=RND(4):NEXT

OSCLI"LOAD <Obey$Dir>.16x16-FONT "+STR$~(FONT)

FOR PASS=0 TO 2 STEP 2
P%=CODE
[OPT PASS

STMFD    R13!,{R14}
SWI      "OS_RemoveCursors"
ADR      R0,INPT
ADR      R1,SCR
SWI      "OS_ReadVduVariables"
MOV      R0,#0
STR      R0,TEXTOFF
STRB     R0,COUN
MOV      R0,#64
STR      R0,WCOUNT
BL       CLRBUFF                    ;SCROLLBUFFER LOESCHEN
SWI      "DSym_RestartSong"         ;SOUND INIT
MOV      R0,#63
SWI      "DSym_Vol"                 ;SET MAX.VOLUME


.MAIN
MOV      R0,#19
SWI      "OS_Byte"

MOV      R1,#&28
MOV      R2,#&02
BL       SETMASK           ;NUR VSYNC,BUFFERSWAP,TIMER IRQ'S

LDR      R12,BANK
RSB      R1,R12,#2
STR      R1,BANK
MOV      R0,#113
SWI      "OS_Byte"         ;SET SCREEN-BANK
LDR      R0,SCR
RSBS     R1,R12,#2
ADDEQ    R0,R0,#384*288
STR      R0,SCRBASE

MOV      R0,#&8
BL       BORDER
STR      R13,STACK
LDR      R0,SCRBASE
MOV      R1,#144:MOV R2,#0
MOV      R3,R2:MOV 4,2:MOV 5,2:MOV 6,2:MOV 7,2:MOV 8,2
MOV      R9,R2:MOV 10,2:MOV 11,2:MOV 12,2:MOV 13,2:MOV 14,2
.CLRLOOP
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R14}:STMIA R0!,{R2-R14}
STMIA    R0!,{R2-R11}
SUBS     R1,R1,#1
BNE      CLRLOOP
LDR      R13,STACK

MOV      R0,#&40
BL       BORDER
BL       SETCHAR
BL       MSCROLL

MOV      R0,#&C00
BL       BORDER
BL       STARFIELD

MOV      R0,#&600
BL       BORDER
BL       SBOBS

MOV      R0,#&C
BL       BORDER
BL       CALC
MOV      R0,#&8
BL       BORDER
BL       SORT
MOV      R0,#&4
BL       BORDER
BL       SETBOBS
BL       SCHAUKEL

LDRB     R0,ALPHA:ADD R0,R0,#2:STRB R0,ALPHA
LDRB     R0,BETA: SUB R0,R0,#1:STRB R0,BETA
LDRB     R0,GAMMA:ADD R0,R0,#1:STRB R0,GAMMA

MOV      R0,#0
BL       BORDER
MOV      R1,#&6F
MOV      R2,#&FE
BL       SETMASK
MOV      R0,#&7A
SWI      "OS_Byte"         ;CHECK KEYBOARD
CMP      R1,#113
BLEQ     FM1
CMP      R1,#114
BLEQ     FM2
CMP      R1,#115
BLEQ     FM3
CMP      R1,#20
BLEQ     FM4
CMP      R1,#116
BLEQ     FM5
CMP      R1,#117
BLEQ     FM6
CMP      R1,#22
BLEQ     FM7
CMP      R1,#118
BLEQ     FM8

LDR      R0,BORD_OFF
CMP      R1,#73            ;RETURN-TASTE
LDREQ    R0,BORD_ON
STR      R0,BORDER

CMP      R1,#98
BNE      MAIN

SWI      "DSym_Pause"      ;STOP MUSIC
SWI      256+22
SWI      256+0
LDMFD    R13!,{PC}
;

;******** VARIABELN ********
.INPT     EQUD 149:EQUD -1
.BANK     EQUD 0
.SCR      EQUD 0
.SCRBASE  EQUD 0
.STACK    EQUD 0
.SIC1     EQUD 0
.SIC2     EQUD 0
.SIX1     EQUD WSIN1
.SIX2     EQUD WSIN2
.BUFFADR  EQUD SCRBUFF
.FONTADR  EQUD FONT
.TEXTPTR  EQUD SCRTEXT
.TEXTOFF  EQUD 0
.STARS    EQUD ADRTAB
.SPEEDS   EQUD SPDTAB
.WADR     EQUD WSIN
.WCOUNT   EQUD 0
.KOMPOS   EQUD PUNKTE
.TEMP     EQUD DUMMY
.CTAB     EQUD TCOS
.STAB     EQUD TSIN
.XMOVE    EQUD 0
.YMOVE    EQUD 0
.WAVESPD  EQUB 0
.WAVEADD  EQUB 0
.ALPHA    EQUB 0
.BETA     EQUB 162
.GAMMA    EQUB 20
.XMCNT    EQUB 0
.XMADD    EQUB 2
.YMCNT    EQUB 0
.YMADD    EQUB 1
.COUN     EQUB 0
ALIGN
;

.SETMASK
SWI      "OS_EnterOS"
MOV      R0,#&03200000
STRB     R1,[R0,#&18]
STRB     R2,[R0,#&28]
TEQP     PC,#0
MOVNV    R0,R0
MOV      PC,R14
;

.BORDER
MOV      PC,R14
SWI      "OS_EnterOS"
MOV      R1,#&03400000
EOR      R0,R0,#&40000000
STR      R0,[R1]
TEQP     PC,#0
.BORD_ON
MOVNV    R0,R0
.BORD_OFF
MOV      PC,R14
;

.CLRBUFF
STMFD    R13!,{R14}
LDR      R0,BUFFADR
MOV      R1,#0:MOV 2,1:MOV 3,1:MOV 4,1:MOV 5,1:MOV 6,1:MOV 7,1
MOV      R8,R1:MOV 9,1:MOV 10,1:MOV 11,1:MOV 12,1
MOV      R14,#16
.CLRLOOP
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1-R12}
STMIA    R0!,{R1,R4}
SUBS     R14,R14,#1
BNE      CLRLOOP
LDMFD    R13!,{PC}
;

.SCHAUKEL
LDR      R8,SIX1
LDRB     R0,XMCNT
LDRB     R1,XMADD
ADD      R0,R0,R1
AND      R0,R0,#255
STRB     R0,XMCNT
LDR      R0,[R8,R0,LSL#2]
SUB      R0,R0,#96
STR      R0,XMOVE

LDR      R8,SIX2
LDRB     R0,YMCNT
LDRB     R1,YMADD
ADD      R0,R0,R1
AND      R0,R0,#255
STRB     R0,YMCNT
LDR      R0,[R8,R0,LSL#2]
SUB      R0,R0,#48
STR      R0,YMOVE
MOV      PC,R14
;

.STARFIELD
LDR      R7,STARS
LDR      R8,SPEEDS
LDR      R9,SCRBASE
MOV      R10,#150
.STARLOOP
LDR      R0,[R7]
LDRB     R1,[R8],#1
ADD      R0,R0,R1
CMP      R0,#384*288
MOVHS    R0,#0
STR      R0,[R7],#4
MOV      R11,#&FC
CMP      R1,#3
MOVEQ    R11,#&D2
CMP      R1,#2
MOVEQ    R11,#&D0
MOVLO    R11,#&2E
STRB     R11,[R9,R0]
SUBS     R10,10,#1
BNE      STARLOOP
MOV      PC,R14
;

.SBOBS
STMFD    R13!,{R14}
ADR      R8,XSIN1
LDMIA    R8,{R0-R7}
ADD      R0,R0,R4:AND R0,R0,#255
ADD      R1,R1,R5:AND R1,R1,#255
ADD      R2,R2,R6:AND R2,R2,#255
ADD      R3,R3,R7:AND R3,R3,#255
STMIA    R8,{R0-R7}
ADR      R8,XADD1
LDMIA    R8,{R4-R7}
MOV      R12,#160
LDR      R14,SCRBASE
.LISLOOP
ADD      R0,R0,R4:AND R0,R0,#255    ;XSIN1+XADD1
ADD      R1,R1,R5:AND R1,R1,#255    ;XSIN2+XADD2
ADD      R2,R2,R6:AND R2,R2,#255    ;YSIN1+YADD1
ADD      R3,R3,R7:AND R3,R3,#255    ;YSIN2+YADD2
LDR      R9,SIX1                    ;LARGE SINTABLE
MOV      R11,R9
LDR      R8,[R9,R0,LSL#2]           ;R8 =SIN1(XSIN1)
LDR      R9,[R9,R2,LSL#2]           ;R9 =SIN1(YSIN1)
LDR      R10,[R11,R1,LSL#2]         ;R10=SIN1(XSIN2)
LDR      R11,SIX2
LDR      R11,[R11,R3,LSL#2]         ;R11=SIN2(YSIN2)
ADD      R8,R8,R10                  ;= SIN(XSIN1)+SIN1(XSIN2)
ADD      R9,R9,R11                  ;= SIN(YSIN1)+SIN1(YSIN2)
ADD      R10,R14,R9,LSL#8           ;= SCRBASE+YPOS*256
ADD      R10,R10,R9,LSL#7           ;= SCRADR +YPOS*128 (TOTAL 384)
ADD      R10,R10,R8                 ;= SCRADR +XPOS
RSB      R8,R12,#240
STRB     R8,[R10,#384]!
STRB     R8,[R10,#1]
STRB     R8,[R10,#-1]
STRB     R8,[R10,#384]
STRB     R8,[R10,#-384]
SUBS     R12,R12,#1
BNE      LISLOOP
LDMFD    R13!,{PC}

.XSIN1   EQUD 0
.XSIN2   EQUD 0
.YSIN1   EQUD 0
.YSIN2   EQUD 0
.XSPD1   EQUD 2
.XSPD2   EQUD -1
.YSPD1   EQUD 1
.YSPD2   EQUD -2

.XADD1   EQUD 5
.XADD2   EQUD -1
.YADD1   EQUD -2
.YADD2   EQUD 3

.FM1
MOV      R0,#0
B        EINTRAG
.FM2
MOV      R0,#1
B        EINTRAG
.FM3
MOV      R0,#2
B        EINTRAG
.FM4
MOV      R0,#3
B        EINTRAG
.FM5
MOV      R0,#4
B        EINTRAG
.FM6
MOV      R0,#5
B        EINTRAG
.FM7
MOV      R0,#6
B        EINTRAG
.FM8
MOV      R0,#7
.EINTRAG
ADR      R1,FRAMETAB       ;FORMEN-TABELLE
ADR      R2,XSPD1          ;8-SIN-PARAMETER
ADD      R1,R1,R0,LSL#5    ;FORMNUMMER * 32
LDMIA    R1,{R3-R10}       ;8 PARAMETER LESEN
STMIA    R2,{R3-R10}       ;UND SPEICHERN
MOV      PC,R14

.FRAMETAB
EQUD 1 :EQUD -2:EQUD  3:EQUD -2:EQUD  2:EQUD -2:EQUD  2:EQUD -4
EQUD 2 :EQUD -1:EQUD -2:EQUD  3:EQUD 16:EQUD-17:EQUD  2:EQUD  1
EQUD 2 :EQUD  1:EQUD  2:EQUD -1:EQUD  2:EQUD -2:EQUD  2:EQUD -2
EQUD 1 :EQUD -3:EQUD -1:EQUD  2:EQUD  5:EQUD  6:EQUD  7:EQUD  6
EQUD 1 :EQUD -2:EQUD  2:EQUD -1:EQUD  1:EQUD -2:EQUD -1:EQUD -124
EQUD 4 :EQUD  3:EQUD  2:EQUD  1:EQUD -1:EQUD -2:EQUD -3:EQUD -4
EQUD-1 :EQUD  2:EQUD  2:EQUD -3:EQUD -6:EQUD  5:EQUD -4:EQUD  3
EQUD 2 :EQUD -1:EQUD  1:EQUD -2:EQUD  5:EQUD -1:EQUD -2:EQUD  3
;

.MSCROLL
STMFD    R13!,{R14}
LDR      R1,BUFFADR
ADD      R0,R1,#64
MOV      R2,#96
LDR      R11,WCOUNT
LDRB     R10,WAVESPD
SUB      R11,R11,R10
AND      R11,R11,#255
STR      R11,WCOUNT
LDR      R14,SCRBASE
LDRB     R10,WAVEADD
.COPY2
STMFD    R13!,{R10,R14}
LDMIA    R0!,{R3-R10}
STMIA    R1!,{R3-R10}
LDR      R12,WADR
LDR      R12,[R12,R11,LSL#2]
ADD      R14,R14,R12
STR      R3,[R14],#384
STR      R4,[R14],#384
STR      R5,[R14],#384
STR      R6,[R14],#384
STR      R7,[R14],#384
STR      R8,[R14],#384
STR      R9,[R14],#384
STR      R10,[R14],#384
LDMIA    R0!,{R3-R10}
STMIA    R1!,{R3-R10}
STR      R3,[R14],#384
STR      R4,[R14],#384
STR      R5,[R14],#384
STR      R6,[R14],#384
STR      R7,[R14],#384
STR      R8,[R14],#384
STR      R9,[R14],#384
LDMFD    R13!,{R10,R14}
ADD      R11,R11,R10
AND      R11,R11,#255
ADD      R14,R14,#4
SUBS     R2,R2,#1
BNE      COPY2
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R12}
STMIA    R1!,{R3-R12}
LDMIA    R0!,{R3-R6}
STMIA    R1!,{R3-R6}
LDMFD    R13!,{PC}

.SETCHAR
LDRB     R0,COUN
SUBS     R0,R0,#1
BPL      SKIP
LDR      R0,TEXTPTR
LDR      R1,TEXTOFF
LDRB     R2,[R0,R1]
CMP      R2,#0
MOVEQ    R1,#0
LDREQB   R2,[R0]
CMP      R2,#ASC("a")
BEQ      EFF1
CMP      R2,#ASC("b")
BEQ      EFF2
.CONTI
ADD      R1,R1,#1
STR      R1,TEXTOFF
LDR      R0,FONTADR
SUB      R2,R2,#32
ADD      R0,R0,R2,LSL#8
LDR      R1,BUFFADR
ADD      R1,R1,#64*96
MOV      R7,#15
.AUFLOOP
LDMIA    R0!,{R3-R6}
STR      R3,[R1,#64]
STR      R4,[R1,#128]
STR      R5,[R1,#192]
STR      R6,[R1,#256]
ADD      R1,R1,#4
SUBS     R7,R7,#1
BNE      AUFLOOP
MOV      R0,#3
CMP      R2,#ASC("I")-32
MOVEQ    R0,#1
.SKIP
STRB     R0,COUN
MOV      PC,R14
.EFF1
ADD      R1,R1,#1
LDRB     R2,[R0,R1]
SUB      R2,R2,#48
STRB     R2,WAVESPD
ADD      R1,R1,#1
LDRB     R2,[R0,R1]
B        CONTI
.EFF2
ADD      R1,R1,#1
LDRB     R2,[R0,R1]
SUB      R2,R2,#48
STRB     R2,WAVEADD
ADD      R1,R1,#1
LDRB     R2,[R0,R1]
B        CONTI


.SCRTEXT
EQUS "                       "
EQUS " WELCOME TO BSC'S ARC PREMIERE .........."
EQUS " a2THIS IS MY FIRST ARC-DEMO EVER, NOTHING SPECIAL,"
EQUS " BUT I PROMISE THAT MY NEXT DEMOS WILL BE BETTER"
EQUS " ......................"
EQUS " THE SOUND YOU ARE HEARING WAS COMPOSED BY PETER"
EQUS " SALOMONSEN OF PMC (GREAT TUNE, PETER!!)"
EQUS " ....................a0"
EQUS " LET'S GO FOR SOME GREETINX .....                  "
EQUS "      b1ARMAXESS (YAKI DA, EDUARD!)   -   ACERO   -"
EQUS "   ODIESOFT   -   FACE HUGGER (COME ON, BUY AN"
EQUS " ARCHIMEDES!) .................."
EQUS " FURTHER REGARDS TO  a1    ARCANGLES   -   BASS"
EQUS "   -  a2 BYTEPOOL PRODUXIONS   -  a3 ARC EMPIRE"
EQUS " AND ALL ARC FANS OVER THE WORLD ............"
EQUS "..............a1...........      "
EQUS " 'ES WAR EINMAL EIN MANN, DER HATTE FUENF SOEHNE."
EQUS " DA SPRACHEN DIE SOEHNE: a3'VATER, ERZAEHL UNS EINE"
EQUS " GESCHICHTE!' DA HOB DER VATER AN: a1'ES WAR"
EQUS " EINMAL EIN MANN, DER HATTE FUENF SOEHNE....."
EQUS ".a2...............a3.............a4............"
EQUS "...a5...............a6.............a5............"
EQUS ".....a4...............a3..............a2..........."
EQUS "                       a0 b0 "
EQUB 0
ALIGN
;


.CALC
STMFD    R13!,{R14}
LDR      R6,CTAB
LDR      R7,STAB
LDRB     R8,ALPHA
LDR      R0,[R6,R8,LSL#2]  ;COS(ALPHA)
LDR      R3,[R7,R8,LSL#2]  ;SIN(ALPHA)
LDRB     R8,BETA
LDR      R1,[R6,R8,LSL#2]  ;COS(BETA)
LDR      R4,[R7,R8,LSL#2]  ;SIN(BETA)
LDRB     R8,GAMMA
LDR      R2,[R6,R8,LSL#2]  ;COS(GAMMA)
LDR      R5,[R7,R8,LSL#2]  ;SIN(GAMMA)
LDR      R12,TEMP
LDR      R11,KOMPOS
LDR      R9,[R11],#4
.LOOP3
]:C1=0:C2=1:C3=2:S1=3:S2=4:S3=5:X=6:Y=7:Z=8:[OPT PASS
LDMIA    R11!,{X,Y,Z}

MUL      R10,Y,C1          ;=Y*COS(A)
MUL      R14,Z,S1          ;=Z*SIN(A)
SUB      R14,R10,R14       ;=Y*COS(A)-Z*SIN(A)
MUL      R10,Y,S1          ;=Y*SIN(A)
MOV      Y,R14             ;Y UM X GEDREHT
MLA      Z,C1,Z,R10        ;=Z*COS(A)+Y*SIN(A)
MOV      X,X,ASL#12        ;FIXPOINT

MUL      R10,X,C2          ;=COS(B)*X
MUL      R14,Z,S2          ;=SIN(B)*Z
SUB      R14,R10,R14       ;=COS(B)*X-SIN(B)*Z
MUL      R10,X,S2          ;=SIN(B)*X
MOV      X,R14,ASR#12
MLA      R14,Z,C2,R10      ;=COS(B)*Z+SIN(B)*X
MOV      Z,R14,ASR#12

MUL      R10,X,C3          ;=COS(C)*X
MUL      R14,Y,S3          ;=SIN(C)*Y
SUB      R14,R10,R14       ;=COS(C)*X-SIN(C)*Y
MUL      R10,X,S3          ;=SIN(C)*X
MOV      X,R14,ASR#12
MLA      R14,Y,C3,R10      ;=COS(C)*Y+SIN(C)*X
MOV      Y,R14,ASR#12

EOR      X,X,Z             ;X UND Z
EOR      Z,Z,X             ;VERTAUSCHEN
EOR      X,X,Z

STMIA    R12!,{X,Y,Z}      ;FOLGE IST Z,Y,X
SUBS     R9,R9,#1
BNE      LOOP3
LDMFD    R13!,{PC}


.PUNKTE   DCD 16
DCD -30 :DCD 0 :DCD -30
DCD -10 :DCD 0 :DCD -30
DCD  10 :DCD 0 :DCD -30
DCD  30 :DCD 0 :DCD -30
DCD -30 :DCD 0 :DCD -10
DCD -10 :DCD 0 :DCD -10
DCD  10 :DCD 0 :DCD -10
DCD  30 :DCD 0 :DCD -10
DCD -30 :DCD 0 :DCD 10
DCD -10 :DCD 0 :DCD 10
DCD  10 :DCD 0 :DCD 10
DCD  30 :DCD 0 :DCD 10
DCD -30 :DCD 0 :DCD 30
DCD -10 :DCD 0 :DCD 30
DCD  10 :DCD 0 :DCD 30
DCD  30 :DCD 0 :DCD 30
;

.SORT
STMFD    R13!,{R14}
LDR      R11,TEMP          ;KOMPOS KOMMEN Z,Y,X!
MOV      R12,#BALLS-1
.SORTL
ADD      R10,R11,R12,LSL#3 ;LISTE+12*ANZAHL
ADD      R10,R10,R12,LSL#2 ;=ZEIGER AUF LETZES ELEMENT
MOV      R6,#&80000000     ;KLEINSTER NEG. WERT
MOV      R7,R11            ;MAXPTR UND
MOV      R8,R11            ;SUCHZEIGER AUF ANFANG
.FINDMAX
LDR      R0,[R8],#12       ;Z-KOMPONENTE HOLEN
CMP      R0,R6             ;GROESSER ALS MAXWERT?
MOVGT    R6,R0             ;JA, MAXWERT=WERT
SUBGT    R7,R8,#12         ;UND MAXPTR=ADRESSE
CMP      R8,R10            ;SCHON LETZTES?
BLS      FINDMAX           ;NEIN, WEITER SUCHEN
CMP      R7,R10            ;WENN GROESSTES=LETZTES NICHT TAUSCHEN
LDMNEIA   R7,{R0-R2}       ;KOMPONENTEN GR. ELEMENT
LDMNEIA  R10,{R3-R5}       ;LETZTES ELEMENT LESEN
STMNEIA   R7,{R3-R5}       ;UND BEIDE
STMNEIA  R10,{R0-R2}       ;WERTE TAUSCHEN
SUBS     R12,R12,#1        ;COUNTER-1
BNE      SORTL             ;NAECHSTER DURCHLAUF
LDMFD    R13!,{PC}


.SETBOBS
STMFD    R13!,{R14}
LDR      R10,SCRBASE
ADD      R10,R10,#384*144
ADD      R10,R10,#192      ;SCREENMITTE
MOV      R11,#BALLS
LDR      R12,TEMP
.BOBLOOP
LDMIA    R12!,{R0,Y,Z}     ;X UND Z SIND VERTAUSCHT!!
MOV      X,Z
SUB      Z,R0,#&E0000      ;Z-HILF BILDEN
MOV      R0,X,ASL#8        ;R0=X*FIXPOINT
MOV      R1,Z              ;R1=TIEFE
BL       TEILEN            ;X'=FL*X/TIEFE
SUB      R0,R0,#8          ;BALLMITTE AUF PUNKT SETZEN
LDR      R1,XMOVE
ADD      R0,R0,R1
ADD      R9,R10,R0
MOV      R0,Y,ASL#8        ;R0=X*FIXPOINT
MOV      R1,Z
BL       TEILEN            ;Y'=FL*Y/TIEFE
SUB      R0,R0,#8
LDR      R1,YMOVE
ADD      R0,R0,R1          ;Y-MOVE ADD'EN
ADD      R9,R9,R0,LSL#8
ADD      R9,R9,R0,LSL#7
                           ;DIREKT-ADR. SPRITE
MOV      R1,#&83
MOV      R2,#&88
MOV      R3,#&89
MOV      R4,#&8B
MOV      R5,#&AB
MOV      R6,#&FF
.SPROUT
STRB 1,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]
STRB 2,[9,#9]:STRB 1,[9,#10]
ADD 9,9,#384
STRB 1,[9,#3]:STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]
STRB 2,[9,#7]:STRB 2,[9,#8]:STRB 2,[9,#9]:STRB 2,[9,#10]
STRB 2,[9,#11]:STRB 1,[9,#12]
ADD 9,9,#384
STRB 1,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]:STRB 2,[9,#5]
STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]:STRB 3,[9,#9]
STRB 4,[9,#10]:STRB 4,[9,#11]:STRB 3,[9,#12]:STRB 1,[9,#13]
ADD 9,9,#384
STRB 1,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]
STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 3,[9,#8]
STRB 4,[9,#9]:STRB 5,[9,#10]:STRB 5,[9,#11]:STRB 4,[9,#12]
STRB 3,[9,#13]:STRB 1,[9,#14]
ADD 9,9,#384
STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]
STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 4,[9,#8]
STRB 5,[9,#9]:STRB 6,[9,#10]:STRB 6,[9,#11]:STRB 5,[9,#12]
STRB 4,[9,#13]:STRB 2,[9,#14]
ADD 9,9,#384
STRB 1,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 3,[9,#8]:STRB 5,[9,#9]:STRB 6,[9,#10]:STRB 6,[9,#11]
STRB 5,[9,#12]:STRB 4,[9,#13]:STRB 2,[9,#14]:STRB 1,[9,#15]
ADD 9,9,#384
STRB 2,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 3,[9,#8]:STRB 4,[9,#9]:STRB 5,[9,#10]:STRB 5,[9,#11]
STRB 4,[9,#12]:STRB 3,[9,#13]:STRB 2,[9,#14]:STRB 2,[9,#15]
ADD 9,9,#384
STRB 2,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 2,[9,#8]:STRB 3,[9,#9]:STRB 4,[9,#10]:STRB 4,[9,#11]
STRB 3,[9,#12]:STRB 2,[9,#13]:STRB 2,[9,#14]:STRB 2,[9,#15]
ADD 9,9,#384
STRB 2,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 2,[9,#8]:STRB 2,[9,#9]:STRB 2,[9,#10]:STRB 2,[9,#11]
STRB 2,[9,#12]:STRB 2,[9,#13]:STRB 2,[9,#14]:STRB 2,[9,#15]
ADD 9,9,#384
STRB 2,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 2,[9,#8]:STRB 2,[9,#9]:STRB 2,[9,#10]:STRB 2,[9,#11]
STRB 2,[9,#12]:STRB 2,[9,#13]:STRB 2,[9,#14]:STRB 2,[9,#15]
ADD 9,9,#384
STRB 1,[9,#0]:STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]
STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]
STRB 2,[9,#8]:STRB 2,[9,#9]:STRB 2,[9,#10]:STRB 2,[9,#11]
STRB 2,[9,#12]:STRB 2,[9,#13]:STRB 2,[9,#14]:STRB 1,[9,#15]
ADD 9,9,#384
STRB 2,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]
STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]
STRB 2,[9,#9]:STRB 2,[9,#10]:STRB 2,[9,#11]:STRB 2,[9,#12]
STRB 2,[9,#13]:STRB 2,[9,#14]
ADD 9,9,#384
STRB 1,[9,#1]:STRB 2,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]
STRB 2,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]
STRB 2,[9,#9]:STRB 2,[9,#10]:STRB 2,[9,#11]:STRB 2,[9,#12]
STRB 2,[9,#13]:STRB 1,[9,#14]
ADD 9,9,#384
STRB 1,[9,#2]:STRB 2,[9,#3]:STRB 2,[9,#4]:STRB 2,[9,#5]
STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]:STRB 2,[9,#9]
STRB 2,[9,#10]:STRB 2,[9,#11]:STRB 2,[9,#12]:STRB 1,[9,#13]
ADD 9,9,#384
STRB 1,[9,#3]:STRB 2,[9,#4]:STRB 2,[9,#5]:STRB 2,[9,#6]
STRB 2,[9,#7]:STRB 2,[9,#8]:STRB 2,[9,#9]:STRB 2,[9,#10]
STRB 2,[9,#11]:STRB 1,[9,#12]
ADD 9,9,#384
STRB 1,[9,#5]:STRB 2,[9,#6]:STRB 2,[9,#7]:STRB 2,[9,#8]
STRB 2,[9,#9]:STRB 1,[9,#10]
SUBS     R11,R11,#1
BNE      BOBLOOP
LDMFD    R13!,{PC}


.TEILEN ; R0=R0/R1
MOV      R3,#0
CMP      R0,#0             ;VORZEICHEN TESTEN
ADDMI    R3,R3,#1          ;UND GGF.
RSBMI    R0,R0,#0          ;WERT NEGIEREN
CMP      R1,#0
ADDMI    R3,R3,#1
RSBMI    R1,R1,#0
MOV      R2,#0             ;REST/AKKU LOESCHEN
]:FORA=1TO32:[OPT PASS
ADDS     R0,R0,R0          ;BIT 31-R0 INS CARRY UND SHIFTEN
ADC      R2,R2,R2          ;R2 SHIFTEN UND CARRY INS BIT 0
CMP      R2,R1             ;R2 GROESSER R1
SUBGE    R2,R2,R1          ;JA, ABZIEHEN
ORRGE    R0,R0,#1          ;UND BIT 0-R0 SETZEN
]:NEXT:[OPT PASS
CMP      R3,#1
RSBEQ    R0,R0,#0
MOV      PC,R14

]:NEXT
CALL CODE
END

